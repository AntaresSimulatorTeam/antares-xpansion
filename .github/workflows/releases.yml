name: Release asset upload

on:
  release:
    types: [created]

env:
  GITHUB_TOKEN: ${{ github.token }}
  
jobs:

  windows:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest,ubuntu-20.04]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgCommitId: 'ee17a685087a6886e5681e355d36cd784f0dd2c8'
            vcpkgPackages: jsoncpp gtest boost-mpi openssl curl wxwidgets boost-test boost-process boost-filesystem boost-dll boost-regex boost-program-options

    steps:
    - uses: actions/checkout@v2 
    
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
          
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -r src/src_python/requirements.txt
    
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.0
      
    - name: Pre-requisites
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |          
          choco install wget --no-progress
          wget -nv https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe
          msmpisetup.exe -unattend
    
    - name : Install deps with VCPKG
      if: matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@v4
      id: runvcpkg
      with:
        vcpkgArguments: '${{ matrix.vcpkgPackages }}'
        vcpkgTriplet: '${{ matrix.triplet }}'
        vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'        
        
    - name: Download pre-compiled librairies (windows)
      if: matrix.os == 'windows-latest'
      run: |
           wget https://github.com/AntaresSimulatorTeam/antares-deps/releases/download/v1.0.0/rte-antares-deps-${{matrix.os}}-x64-Release-solver.zip
           Expand-Archive ./rte-antares-deps-${{matrix.os}}-x64-Release-solver.zip -DestinationPath .
           rm rte-antares-deps-${{matrix.os}}-x64-Release-solver.zip
           
    - name: Download pre-compiled librairies (ubuntu)
      if: matrix.os == 'ubuntu-20.04'    
      run: |
           wget https://github.com/AntaresSimulatorTeam/antares-deps/releases/download/v1.0.0/rte-antares-deps-${{matrix.os}}-Release-solver.tar.gz
           tar -xvf rte-antares-deps-${{matrix.os}}-Release-solver.tar.gz
           rm -rf rte-antares-deps-${{matrix.os}}-Release-solver.tar.gz
           
    - name: Init submodule
      run: |
           git submodule update --init --recursive .
    
    - name: Install mandatory system libraries 
      if: matrix.os == 'ubuntu-20.04'    
      run: |
           sudo apt-get update --fix-missing
           sudo apt-get install libjsoncpp-dev libgtest-dev libboost-mpi-dev
           sudo apt-get install uuid-dev libcurl4-openssl-dev libssl-dev libwxgtk3.0-gtk3-dev
           sudo apt-get install libboost-test-dev libboost-filesystem-dev libboost-regex-dev libboost-dev libboost-program-options-dev
           cd /usr/src/googletest/
           sudo cmake .
           sudo cmake --build . --target install
        
    - name: Configure with VCPKG
      shell: cmd
      if: matrix.os == 'windows-latest'
      run: |
           cmake -B _build -S . -DDEPS_INSTALL_DIR=rte-antares-deps-Release -DBUILD_antares_solver=ON -DCMAKE_BUILD_TYPE=Release -DUSE_SEQUENTIAL=true -DUSE_MPI=true -DCMAKE_TOOLCHAIN_FILE=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
    
    - name: Configure
      if: matrix.os != 'windows-latest'
      run: |
           cmake -B _build -S . -DDEPS_INSTALL_DIR=rte-antares-deps-Release -DBUILD_antares_solver=ON -DCMAKE_BUILD_TYPE=Release -DUSE_SEQUENTIAL=true -DUSE_MPI=true
    
    - name: Build
      run: |
           cmake --build _build --config Release -j2
           
    - name: .zip Installer creation
      shell: bash
      if: matrix.os == 'windows-latest'
      run: |
           cd _build
           cpack -G ZIP
           export ZIP_NAME=$(ls *.zip)
           echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
        
    - name: .tar.gz creation
      if: matrix.os == 'ubuntu-20.04'
      run: |
           cd _build
           cpack -G TGZ
           export TGZ_NAME=$(ls *.tar.gz)
           echo "TGZ_NAME=$TGZ_NAME" >> $GITHUB_ENV
           
    - name: Upload .tar.gz
      if: matrix.os == 'ubuntu-20.04'
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: _build/${{env.TGZ_NAME}}
        asset_name: ${{env.TGZ_NAME}}
        asset_content_type: application/octet-stream
        
    - name: Upload .zip
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: _build/${{env.ZIP_NAME}}
        asset_name: ${{env.ZIP_NAME}}
        asset_content_type: application/octet-stream
    
