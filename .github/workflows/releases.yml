name: Release asset upload

on:
  release:
    types: [created]

env:
  GITHUB_TOKEN: ${{ github.token }}
  
jobs:

  windows:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest,ubuntu-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgCommitId: 'ee17a685087a6886e5681e355d36cd784f0dd2c8'
            vcpkgPackages: jsoncpp gtest boost-mpi openssl curl boost-test boost-filesystem boost-regex

    steps:
    - uses: actions/checkout@v2 
    
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.0
      
    - name: Pre-requisites
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |          
          choco install wget --no-progress
          wget -nv https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe
          msmpisetup.exe -unattend
    
    - name : Install deps with VCPKG
      if: matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@v4
      id: runvcpkg
      with:
        vcpkgArguments: '${{ matrix.vcpkgPackages }}'
        vcpkgTriplet: '${{ matrix.triplet }}'
        vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'        
    
    - name: Install mandatory system libraries 
      if: matrix.os == 'ubuntu-latest'    
      run: |
           sudo apt-get update --fix-missing
           sudo apt-get install libjsoncpp-dev libgtest-dev libboost-mpi-dev
           sudo apt-get install libuuid1 uuid-dev libssh2-1 libssh2-1-dev libidn2-dev libidn11 libidn11-dev gtk2.0 libwxgtk3.0-dev libcurl4-openssl-dev libb64-dev
           sudo apt-get install libboost-test-dev libboost-filesystem-dev libboost-dev
           cd /usr/src/googletest/
           sudo cmake .
           sudo cmake --build . --target install
        
    - name: Configure with VCPKG
      shell: cmd
      if: matrix.os == 'windows-latest'
      run: |
           cmake -B _build -S . -DUSE_SEQUENTIAL=true -DUSE_MPI=true -DCMAKE_TOOLCHAIN_FILE=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_BUILD_TYPE=release -DBUILD_DEPS=ON
    
    - name: Configure
      if: matrix.os != 'windows-latest'
      run: |
           cmake -B _build -S . -DCMAKE_BUILD_TYPE=release -DBUILD_DEPS=ON -DUSE_SEQUENTIAL=true -DUSE_MPI=true
    
    - name: Build
      run: |
           cmake --build _build --config release -j2
           
    - name: .zip Installer creation
      if: matrix.os == 'windows-latest'
      run: |
           cd _build
           cpack -G ZIP
           $ZIP_NAME=dir *.exe
           $ZIP_NAME=Split-Path $NSIS_NAME -Leaf
           echo "::set-env name=ZIP_NAME::$ZIP_NAME" 
        
    - name: .tar.gz creation
      if: matrix.os == 'ubuntu-latest'
      run: |
           cd _build
           cpack -G TGZ
           export TGZ_NAME=$(ls *.tar.gz)
           echo "::set-env name=TGZ_NAME::$TGZ_NAME"
           
    - name: Upload .tar.gz
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: _build/${{env.TGZ_NAME}}
        asset_name: ${{env.TGZ_NAME}}
        asset_content_type: application/octet-stream
        
    - name: Upload .zip
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: _build/${{env.ZIP_NAME}}
        asset_name: ${{env.ZIP_NAME}}
        asset_content_type: application/octet-stream
    
