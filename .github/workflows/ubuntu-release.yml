name: Ubuntu Release

on:
  push:
    branches:
      - main
      - develop
      - ci/*
      - dependabot/*
  workflow_dispatch:
  workflow_run:
    workflows: [ "Publish Release" ]
    types:
      - completed
  release:
    types: [ created ]

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:

  userguide:
    runs-on: ubuntu-latest
    outputs:
      pdf-name: ${{ steps.create-user-guide.outputs.pdf-name }}

    steps:
      - uses: actions/checkout@v4

      - name: Read antares-xpansion version
        id: antares-xpansion-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_xpansion_version'

      - id: create-user-guide
        name: user guide pdf creation
        uses: ./.github/workflows/generate-userguide-pdf
        with:
          antares-xpansion-version: ${{steps.antares-xpansion-version.outputs.result}}

      - name: user guide upload
        id: userguide_upload
        uses: actions/upload-artifact@v4
        with:
          name: user-guide
          path: ${{ steps.create-user-guide.outputs.pdf-path }}

  build:

    needs: userguide
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        xprs: [
          XPRESS-ON,
          #XPRESS-OFF
        ]
    env:
      XPRESSDIR: ${{ github.workspace }}/xpress
      XPRESS: ${{ github.workspace }}/xpress/bin
      XPRS_LIB_Path: ${{ github.workspace }}/xpress/lib
      ORTOOLS_DIR: $GITHUB_WORKSPACE/or-tools

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Checkout xpressmp linux
        if: matrix.xprs == 'XPRESS-ON'
        uses: actions/checkout@v4
        with:
          repository: rte-france/xpress-mp
          path: ${{ env.XPRESSDIR }}
          ref: ${{ matrix.xprs.ref}}
          token: ${{ secrets.AS_TOKEN }} #reniew token periodically

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.3
        with:
          key: ${{ matrix.os }}-${{ matrix.xprs }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-tests.txt
          pip install -r requirements-ui.txt

      - name: Install mandatory system libraries
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get install libtbb-dev

      - uses: lukka/get-cmake@latest
        with:
          useLocalCache: false
          useCloudCache: true

      - name: Update alternatives
        #mpicxx  uses "g++" so we need g++ to be symbolic link to g++-10
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30
          sudo update-alternatives --set cc /usr/bin/gcc
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30
          sudo update-alternatives --set c++ /usr/bin/g++

      - name: Read antares-solver version
        id: antares-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_version'

      - name: Read antares-xpansion version
        id: antares-xpansion-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_xpansion_version'

      - name: Read antares-deps version
        id: antares-deps-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_deps_version'

      - name: Config OR-Tools URL
        run: |
          echo "ORTOOLS_URL=https://github.com/rte-france/or-tools/releases/download/v9.8-rte1.0/ortools_cxx_ubuntu-20.04_static_sirius.zip" >> $GITHUB_ENV

      - name: Download pre-compiled librairies
        uses: ./.github/workflows/download-extract-precompiled-libraries-tgz
        with:
          antares-deps-version: ${{steps.antares-deps-version.outputs.result}}
          antares-version: ${{steps.antares-version.outputs.result}}
          os: ${{matrix.os}}
          os-full-name: Ubuntu-20.04
          ortools-url: ${{env.ORTOOLS_URL}}
          ortools-dir: ${{env.ORTOOLS_DIR}}

      - name: Download userguide
        uses: actions/download-artifact@v4
        with:
          name: user-guide
          path: docs/

      - run: |
          mkdir -p ${{ github.workspace }}/vcpkg_cache

      - name: vcpkg install
        run: |
          pushd vcpkg
          git fetch --unshallow
          ./bootstrap-vcpkg.sh

      - name: Configure
        shell: bash
        run: |
          cmake -B _build -S . \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DDEPS_INSTALL_DIR=rte-antares-deps-Release \
                -DBUILD_TESTING=ON \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="_install"
                -DCMAKE_PREFIX_PATH="${{env.ORTOOLS_DIR}}/install" \
                -DBUILD_UI=ON  \
                -DUSER_GUIDE_PATH="docs/${{ needs.userguide.outputs.pdf-name }}"
                -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake
                

      - name: Build
        run: |
          cmake --build _build --config Release -j$(nproc)
          cd _build
          cmake --install .

      - name: set name variables
        id: single_file_name
        shell: bash
        run: |
          if [ ${{ matrix.xprs }} == "XPRESS-ON" ]; then
            WITH_XPRS="-xpress"
          else
            WITH_XPRS=""
          fi
          VERSION=${{steps.antares-xpansion-version.outputs.result}}${WITH_XPRS}
          echo "VERSION_WITH_XPRESS=$VERSION" >> $GITHUB_ENV

      - id: create-single-file
        name: Single file .tar.gz creation
        uses: ./.github/workflows/single-file-creation-tgz
        with:
          antares-xpansion-version: ${{env.VERSION_WITH_XPRESS}}

      - name: Installer .tar.gz creation
        run: |
          cd _build
          export FILE_NAME="antaresXpansion-${{env.VERSION_WITH_XPRESS}}-${{ matrix.os }}"
          cpack -G TGZ -D CPACK_PACKAGE_FILE_NAME=$FILE_NAME
          #Need to differentiate between xpress/no_xpress files
          #Cpack command line doesn't seem to care about -P or -R options
          echo "TGZ_NAME=$FILE_NAME.tar.gz" >> $GITHUB_ENV

      - name: Running unit tests
        run: |
          export PATH=${GITHUB_WORKSPACE}/vcpkg_installed/x64-linux/tools/openmpi/bin/:$PATH
          cd _build
          ctest -C Release --output-on-failure -L "medium|unit|benders|lpnamer"

      #Uploads are not necessary for release but useful in other cases
      - name: Upload .tar.gz
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.TGZ_NAME}}
          path: _build/${{env.TGZ_NAME}}

      - name: Upload single file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create-single-file.outputs.archive-name }}
          path: ${{ steps.create-single-file.outputs.archive-path }}

      #######################

      - name: Get release
        if: github.event_name == 'release' && github.event.action == 'created'
        id: get_release
        uses: bruceadams/get-release@main

      - name: Upload Release Asset
        if: github.event_name == 'release' && github.event.action == 'created'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.get_release.outputs.tag_name }} _build/${{env.TGZ_NAME}}
          gh release upload ${{ steps.get_release.outputs.tag_name }} ${{ steps.create-single-file.outputs.archive-path }}

      ########################