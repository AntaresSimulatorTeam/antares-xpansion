name: Release asset upload (Ubuntu)

on:
  release:
    types: [created]

env:
  GITHUB_TOKEN: ${{ github.token }}
  
jobs:

  windows:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]

    steps:
    - uses: actions/checkout@v2 
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
          
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -r requirements-tests.txt
    
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.0 
      
    - name: Read antares-solver version
      id: antares-version
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'antares-version.json'
        prop_path: 'antares_version'
        
    - name: Read antares-xpansion version
      id: antares-xpansion-version
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'antares-version.json'
        prop_path: 'antares_xpansion_version'
        
    - name: Read antares-deps version
      id: antares-deps-version
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'antares-version.json'
        prop_path: 'antares_deps_version'
        
    - name: Download pre-compiled librairies
      uses: ./.github/workflows/download-extract-precompiled-libraries-tgz
      with:
        antares-deps-version: ${{steps.antares-deps-version.outputs.prop}}
        antares-version: ${{steps.antares-version.outputs.prop}}
        os: ${{matrix.os}}
        os-full-name: Ubuntu-20.04
           
    - name: Init submodule
      run: |
           git submodule update --init --recursive .
    
    - name: Install mandatory system libraries 
      run: |
           sudo apt-get update --fix-missing
           sudo apt-get install libjsoncpp-dev libgtest-dev libboost-mpi-dev libboost-program-options-dev
           cd /usr/src/googletest/
           sudo cmake .
           sudo cmake --build . --target install        
    
    - name: Configure
      run: |
           cmake -B _build -S . -DDEPS_INSTALL_DIR=rte-antares-deps-Release -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release -DUSE_MPI=ON -DCMAKE_INSTALL_PREFIX=_install -DBUILD_not_system=OFF
    
    - name: Build
      run: |
           cmake --build _build --config Release -j2 --target install

    - name: Running unit tests
      run: |
           cd _build
           ctest -C Release --output-on-failure -L "medium|unit|benders|lpnamer"
        
    - name: .tar.gz creation
      run: |
           cd _build
           cpack -G TGZ
           export TGZ_NAME=$(ls *.tar.gz)
           echo "TGZ_NAME=$TGZ_NAME" >> $GITHUB_ENV
           
    - name: .deb creation
      run: |
           cd _build
           cpack -G DEB
           export DEB_NAME=$(ls *.deb)
           echo "DEB_NAME=$DEB_NAME" >> $GITHUB_ENV

    - id: create-single-file
      name: Single file .tar.gz creation
      uses: ./.github/workflows/single-file-creation-tgz
      with:
        antares-xpansion-version: ${{steps.antares-xpansion-version.outputs.prop}}

    - name: Upload .tar.gz
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: _build/${{env.TGZ_NAME}}
        asset_name: ${{env.TGZ_NAME}}
        asset_content_type: application/octet-stream
        
    - name: Upload .deb
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: _build/${{env.DEB_NAME}}
        asset_name: ${{env.DEB_NAME}}
        asset_content_type: application/octet-stream

    - name: Single file upload
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ steps.create-single-file.outputs.archive-path }}
        asset_name: ${{ steps.create-single-file.outputs.archive-name }}
        asset_content_type: application/octet-stream 

