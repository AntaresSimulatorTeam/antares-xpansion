name: Windows release

on:
  push:
    branches:
      - main
      - develop
      - ci/*
  workflow_dispatch:
  release:
    types: [ created ]

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:

  userguide:
    runs-on: ubuntu-latest
    outputs:
      pdf-name: ${{ steps.create-user-guide.outputs.pdf-name }}

    steps:
      - uses: actions/checkout@v3

      - name: Read antares-xpansion version
        id: antares-xpansion-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_xpansion_version'

      - id: create-user-guide
        name: user guide pdf creation
        uses: ./.github/workflows/generate-userguide-pdf
        with:
          antares-xpansion-version: ${{steps.antares-xpansion-version.outputs.result}}

      - name: user guide upload
        id: userguide_upload
        uses: actions/upload-artifact@v3
        with:
          name: user-guide
          path: ${{ steps.create-user-guide.outputs.pdf-path }}

  build:
    needs: userguide
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        os: [ windows-latest ]
        triplet: [ x64-windows ]
        xprs: [ XPRESS-OFF ]
    env:
      XPRESSDIR: ${{ github.workspace }}\xpress
      XPRESS: ${{ github.workspace }}\xpress\bin
      XPRS_LIB_Path: ${{ github.workspace }}\xpress\lib
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    outputs:
      zip_name: ${{ steps.zip_name.outputs.zip_name }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Enable git longpaths
        run: git config --system core.longpaths true

      - name: Checkout xpressmp linux
        if: matrix.xprs == 'XPRESS-ON'
        uses: actions/checkout@v3
        with:
          repository: rte-france/xpress-mp-temp
          path: ${{ env.XPRESSDIR }}
          ref: 8.13a
          token: ${{ secrets.AS_TOKEN }}

      - name: Get release
        if: github.event_name == 'release' && github.event.action == 'created'
        id: get_release
        uses:
          bruceadams/get-release@main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Restore both vcpkg and its artifacts from the GitHub cache service.
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v3
        with:
          # The first path is the location of vcpkg (it contains the vcpkg executable and data files).
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg_manifest/vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}-invalidate

      #      - name: Install dependencies
      #        run: |
      #          python -m pip install --upgrade pip
      #          pip install -r requirements-tests.txt
      #          pip install -r requirements-ui.txt

      - name: Pre-requisites
        shell: cmd
        run: |
          choco install wget zip unzip --no-progress
          wget -nv https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe
          msmpisetup.exe -unattend

      - name: Read antares-solver version
        id: antares-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_version'

      - name: Read antares-xpansion version
        id: antares-xpansion-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_xpansion_version'

      - name: Read antares-deps version
        id: antares-deps-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_deps_version'

      #      - name: Install deps with VCPKG
      #        run: |
      #          cd vcpkg
      #          ./bootstrap-vcpkg.sh
      #          vcpkg install jsoncpp gtest boost-mpi boost-program-options tbb zlib --triplet ${{matrix.triplet}}
      #          rm -rf buildtrees
      #          rm -rf packages
      #          rm -rf downloads
      #        shell: bash

      #      - name: Download pre-compiled librairies
      #        uses: ./.github/workflows/download-extract-precompiled-libraries-zip
      #        with:
      #          antares-deps-version: ${{steps.antares-deps-version.outputs.result}}
      #          antares-version: ${{steps.antares-version.outputs.result}}
      #          os: ${{matrix.os}}

      - name: Download userguide
        uses: actions/download-artifact@v3
        with:
          name: user-guide
          path: docs/

      - name: Expand xpress value in env
        #I can't seem to expand the variable in the cmake command line so export it in env
        shell: bash
        run: |
          [[ ${{ matrix.xprs }} == "XPRESS-ON" ]] && XPRESS_VALUE="ON" || XPRESS_VALUE="OFF"
          echo "XPRESS_VALUE=$XPRESS_VALUE" >> $GITHUB_ENV

      #      - name: Configure
      #        #Inverted ternary : @({'condition is false'},{'condition is true'})[$condition] => ({true}, {false})[!$condition]
      #        run: |
      #          $pwd=Get-Location
      #          cmake -B _build -S . -DDEPS_INSTALL_DIR=rte-antares-deps-Release -DCMAKE_PREFIX_PATH="$pwd\rte-antares-${{steps.antares-version.outputs.result}}-installer-64bits" -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release  -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_INSTALL_PREFIX=_install -DBUILD_UI=ON -DUSER_GUIDE_PATH="docs/${{ needs.userguide.outputs.pdf-name }}" -DXPRESS=${{ env.XPRESS_VALUE }} -DXPRESS_ROOT="${{ env.XPRESSDIR }}"

      #      - name: Build
      #        run: |
      #          cmake --build _build --config Release -j2 --target install

      - name: Create installer .zip
        shell: bash
        run: |
          #cd _build
          #          cpack -G ZIP
               touch arti.zip
          export ZIP_NAME=$(ls *.zip)
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: set name variables
        id: single_file_name
        shell: bash
        run: |
          [[ ${{ matrix.xprs }} == "XPRESS-ON" ]] && XPRESS_VALUE="ON" || XPRESS_VALUE="OFF" 
          XPRS=${{ env.XPRESS_VALUE }}
          [ $XPRS == "ON" ] && WITH_XPRS="-xpress" || WITH_XPRS=""
          VERSION=${{steps.antares-xpansion-version.outputs.result}}${WITH_XPRS}
          echo "VERSION_WITH_XPRESS=$VERSION"
          echo "VERSION_WITH_XPRESS=$VERSION" >> $GITHUB_ENV
      #
      #      - name: Create single file .zip
      #        id: create-single-file
      #        uses: ./.github/workflows/single-file-creation-zip
      #        with:
      #          antares-xpansion-version: ${{env.VERSION_WITH_XPRESS}}

      #      - name: Upload installer
      #        uses: actions/upload-artifact@v3
      #        with:
      #          name: ${{env.ZIP_NAME}}
      #          path: _build/${{env.ZIP_NAME}}

      #      - name: Upload single file
      #        uses: actions/upload-artifact@v3
      #        with:
      #          name: ${{ steps.create-single-file.outputs.archive-name }}
      #          path: ${{ steps.create-single-file.outputs.archive-path }}

      - id: zip_name
        shell: bash
        run: |
          echo "zip_name=${{env.ZIP_NAME}}" >> $GITHUB_OUTPUT
          echo $GITHUB_OUTPUT

      - shell: bash
        run: |
          echo ${{steps.zip_name.outputs.zip_name}}

  upload_asset_to_release:
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get release
        if: github.event_name == 'release' && github.event.action == 'created'
        id: get_release
        uses: bruceadams/get-release@main

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{needs.build.outputs.zip_name}}
          path: .

      - name: Upload Release Asset
        env:
          ZIP_NAME: ${{needs.build.outputs.zip_name}}
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo $ZIP_NAME
          echo ${{needs.build.outputs.zip_name}}
          echo ${{needs.build.outputs}}
          echo ${{needs.build}}
          echo ${{needs}}
          gh release upload --repo ${{env.GH_REPO}} ${{ steps.get_release.outputs.tag_name }} $ZIP_NAME

      ########################