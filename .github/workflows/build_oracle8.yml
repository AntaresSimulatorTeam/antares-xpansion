name: Oracle 8 Build

on:
  merge_group:
  push:
    branches:
      - develop
      - dependabot/*
      - release/*
  pull_request:
  release:
    types: [ created ]

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  versions:
    runs-on: ubuntu-latest
    outputs:
      antares-version: ${{steps.antares-version.outputs.result}}
      antares-xpansion-version: ${{steps.antares-xpansion-version.outputs.result}}
    steps:
      - uses: actions/checkout@v4
      - name: Read antares-solver version
        id: antares-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_version'

      - name: Read antares-xpansion version
        id: antares-xpansion-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_xpansion_version'

  build:
    name: Build
    runs-on: ubuntu-latest
    container: 'oraclelinux:8'
    needs: [ versions ]

    outputs:
      zip_name: ${{ steps.zip_name.outputs.zip_name }}
      singlefile_name: ${{ steps.zip_name.outputs.singlefile_name }}

    steps:
      - name: Install System
        run: |
          dnf install -y epel-release git wget rpm-build redhat-lsb-core
          dnf install -y unzip libuuid-devel gcc-toolset-11-toolchain python3-devel zlib-devel
          #make gcc &co available system wide and "action wide"
          source /opt/rh/gcc-toolset-11/enable
          echo $PATH >> $GITHUB_PATH

      - run: |
          dnf module install -y nodejs:20/common

      - uses: lukka/get-cmake@latest
        with:
          useLocalCache: false
          useCloudCache: true

      - uses: actions/checkout@v4
        with:
          submodules: true
          


      - name: Set up Python
        run: |
          dnf update -y
          dnf install -y python3 python3-pip
          pip3 install wheel #Too late to install in requirements.txt
          pip3 install -r requirements-tests.txt

      - name: Set-up Xpress with pip for Oracle 8
        shell: bash
        run: |
          pip3 install "xpress"
          echo ${{ env.pythonLocation }}
          XPRESS_DIR=${{ env.pythonLocation }}/lib/python3.6/site-packages/xpress
          echo "XPRESSDIR=$XPRESS_DIR" >> $GITHUB_ENV
          echo "XPAUTH_PATH=$XPRESS_DIR/license/community-xpauth.xpr" >> $GITHUB_ENV
          echo "Create symbolic link for XPRESS library file because it is missing in the Python installation"
          ln -s $XPRESS_DIR/lib/libxprs.so.42 $XPRESS_DIR/lib/libxprs.so   

      - name: Download pre-compiled librairies
        uses: ./.github/workflows/download-extract-precompiled-libraries-tgz
        with:
          antares-version: ${{needs.versions.outputs.antares-version}}
          os: Oracle8
          os-full-name: OracleServer-8.10

      - name: vcpkg install
        run: |
          git config --global safe.directory '*'
          git submodule update --remote --init vcpkg
          pushd vcpkg
          git fetch --unshallow
          ./bootstrap-vcpkg.sh -disableMetrics
          echo "VCPKG_ROOT=$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_CACHE_DIR=$GITHUB_WORKSPACE/vcpkg_cache" >> $GITHUB_ENV
          echo "VCPKG_BINARY_SOURCES=clear;files,$GITHUB_WORKSPACE/vcpkg_cache,readwrite" >> $GITHUB_ENV

      - name: Restore vcpkg binary dir from cache
        id: cache-vcpkg-binary
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.VCPKG_CACHE_DIR }}
          key: vcpkg-cache-oracle8-${{ hashFiles('src/vcpkg.json', '.git/modules/vcpkg/HEAD') }}
          # Allows to restore a cache when deps have only partially changed (like adding a dependency)
          restore-keys: vcpkg-cache-oracle8-

      - name: Configure
        run: |
          cmake -B _build -S . \
                 -DBUILD_TESTING=ON \
                 -DCMAKE_BUILD_TYPE=Release \
                 -DCMAKE_INSTALL_PREFIX=_install \
                 -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/deps \
                 -DBUILD_UI=OFF \
                 -DALLOW_RUN_AS_ROOT=ON \
                 -DVCPKG_TARGET_TRIPLET=x64-linux-release \
                 -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cmake --build _build --config Release -j$(nproc)


      - name: Run cucumber on outer_loop tests
        uses: ./.github/workflows/cucumber-tests
        with:
          feature: "features/outer_loop_tests.feature"
          mpi_path: ${GITHUB_WORKSPACE}/_build/vcpkg_installed/x64-linux-release/tools/openmpi/bin

      - name: Running unit tests
        timeout-minutes: 120
        shell: bash
        run: |
          export PATH=${GITHUB_WORKSPACE}/_build/vcpkg_installed/x64-linux-release/tools/openmpi/bin/:$PATH
          cd _build
          ctest -C Release --output-on-failure -L "unit|benders|lpnamer|medium"

      - name: Cache vcpkg binary dir
        if: always()
        id: save-cache-vcpkg-binary
        uses: actions/cache/save@v4
        with:
          path: ${{ env.VCPKG_CACHE_DIR }}
          key: vcpkg-cache-oracle8-${{ hashFiles('src/vcpkg.json', '.git/modules/vcpkg/HEAD') }}

      #######################
      - name: Install
        run: |
          cd _build
          cmake --install .

      - name: .tar.gz creation
        run: |
          cd _build
          export FILE_NAME="antaresXpansion-${{needs.versions.outputs.antares-xpansion-version}}-OracleServer-8.10"
          cpack -G TGZ -D CPACK_PACKAGE_FILE_NAME=$FILE_NAME
          echo "TGZ_NAME=$FILE_NAME.tar.gz" >> $GITHUB_ENV

      - name: Upload .tar.gz
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.TGZ_NAME}}
          path: _build/${{env.TGZ_NAME}}

      - id: create-single-file
        name: Single file .tar.gz creation
        uses: ./.github/workflows/single-file-creation-tgz
        with:
          antares-xpansion-version: ${{needs.versions.outputs.antares-xpansion-version}}

      - name: Upload single file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create-single-file.outputs.archive-name }}
          path: ${{ steps.create-single-file.outputs.archive-path }}

      - id: zip_name
        run: |
          echo "singlefile_name=${{steps.create-single-file.outputs.archive-name}}" >> "$GITHUB_OUTPUT"
          echo "zip_name=${{env.TGZ_NAME}}" >> "$GITHUB_OUTPUT"
      #######################
  userguide:
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    outputs:
      pdf-name: ${{ steps.create-user-guide.outputs.pdf-name }}

    steps:
      - uses: actions/checkout@v4

      - name: Read antares-xpansion version
        id: antares-xpansion-version
        uses: ./.github/actions/read-json-value
        with:
          path: 'antares-version.json'
          key: 'antares_xpansion_version'

      - id: create-user-guide
        name: user guide pdf creation
        uses: ./.github/workflows/generate-userguide-pdf
        with:
          antares-xpansion-version: ${{steps.antares-xpansion-version.outputs.result}}

      - name: user guide upload
        id: userguide_upload
        uses: actions/upload-artifact@v4
        with:
          name: user-guide
          path: ${{ steps.create-user-guide.outputs.pdf-path }}

  upload_asset_to_release:
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    needs: [build, userguide]
    env:
      ZIP_NAME: ${{needs.build.outputs.zip_name}}
      SINGLEFILE_NAME: ${{needs.build.outputs.singlefile_name}}
    steps:
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@main

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{env.ZIP_NAME}}
          path: .

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{env.SINGLEFILE_NAME}}
          path: .

      - name: Upload Release Asset
        env:
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload --repo ${{env.GH_REPO}} ${{ steps.get_release.outputs.tag_name }} ${{env.ZIP_NAME}}
          gh release upload --repo ${{env.GH_REPO}} ${{ steps.get_release.outputs.tag_name }} ${{env.SINGLEFILE_NAME}}

      ########################